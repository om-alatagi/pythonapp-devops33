name: Python package #pipeline name

on:  # Controls when the action will run. Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs: #A set of jobs (collection of jobs == pipeline) that will be run as part of the workflow
  build: # first job in the pipeline
    runs-on: ubuntu-latest # worker type to run the job on
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps: # A set of steps to be run as part of the job
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest --cov=app --cov-report=xml:coverage.xml
          cat coverage.xml
      - name: Upload Coverage Report to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sonarqube-scanner:
    name: Build and analyze With SonarQube
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "Download Artifact- coverage-report"  
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: "read coverage report"
        run: cat coverage.xml

      - uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: -Dsonar.python.coverage.reportPaths=coverage.xml

      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # dockerbuildImage:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [build, sonarqube-scanner ]
    
  #   steps:
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     -
  #       name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v6
  #       with:
  #         push: true
  #         tags: jinny1/gfgdevops33:latest
